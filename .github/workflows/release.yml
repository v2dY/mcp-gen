name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write  # Required to create releases
  packages: write  # Required to push to GitHub Container Registry

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run tests
        run: uv run pytest tests/ -v

    #   - name: Run linting
    #     run: uv run mypy src/

  build-and-release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync

      - name: Extract version from tag
        id: version
        run: |
          # Remove 'v' prefix from tag if present
          VERSION=${GITHUB_REF#refs/tags/v}
          VERSION=${VERSION#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Update version in pyproject.toml
        run: |
          # Update the version in pyproject.toml to match the tag
          sed -i 's/^version = .*/version = "${{ steps.version.outputs.version }}"/' pyproject.toml

      - name: Update version in _version.py
        run: |
          # Update the version in _version.py to match the tag
          sed -i 's/^__version__ = .*/__version__ = "${{ steps.version.outputs.version }}"/' src/openapi_mcp_gen/_version.py

      - name: Build package
        run: uv build

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 30

  build-docker:
    name: Build and Push Docker Image
    needs: build-and-release
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO_OWNER: v2dy  # Lowercase repository owner for Docker registry
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Update version in pyproject.toml
        run: |
          # Update the version in pyproject.toml to match the tag
          sed -i 's/^version = .*/version = "${{ needs.build-and-release.outputs.version }}"/' pyproject.toml

      - name: Update version in _version.py
        run: |
          # Update the version in _version.py to match the tag
          sed -i 's/^__version__ = .*/__version__ = "${{ needs.build-and-release.outputs.version }}"/' src/openapi_mcp_gen/_version.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ env.DOCKER_REPO_OWNER }}/mcp-gen:${{ needs.build-and-release.outputs.version }}
            ghcr.io/${{ env.DOCKER_REPO_OWNER }}/mcp-gen:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max